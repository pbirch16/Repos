//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(EF6ConsoleM2M02.SchoolDBContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets6b221588b324c302aa0b65e4a784878f4d93649096a67f30f8e4c0c0394aec86))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework 6 Power Tools", "0.9.2.0")]
    internal sealed class ViewsForBaseEntitySets6b221588b324c302aa0b65e4a784878f4d93649096a67f30f8e4c0c0394aec86 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "6b221588b324c302aa0b65e4a784878f4d93649096a67f30f8e4c0c0394aec86"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.Course")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.Student")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.StudentCourse")
            {
                return GetView2();
            }

            if (extentName == "SchoolDBContext.Courses")
            {
                return GetView3();
            }

            if (extentName == "SchoolDBContext.Students")
            {
                return GetView4();
            }

            if (extentName == "SchoolDBContext.Student_Courses")
            {
                return GetView5();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Course.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Course
        [CodeFirstDatabaseSchema.Course](T1.Course_CourseId, T1.Course_CourseName)
    FROM (
        SELECT 
            T.CourseId AS Course_CourseId, 
            T.CourseName AS Course_CourseName, 
            True AS _from0
        FROM SchoolDBContext.Courses AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Student.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Student
        [CodeFirstDatabaseSchema.Student](T1.Student_StudentId, T1.Student_StudentName)
    FROM (
        SELECT 
            T.StudentId AS Student_StudentId, 
            T.StudentName AS Student_StudentName, 
            True AS _from0
        FROM SchoolDBContext.Students AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.StudentCourse.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing StudentCourse
        [CodeFirstDatabaseSchema.StudentCourse](T1.StudentCourse_StudentRefId, T1.StudentCourse_CourseRefId)
    FROM (
        SELECT 
            Key(T.Student_Courses_Source).StudentId AS StudentCourse_StudentRefId, 
            Key(T.Student_Courses_Target).CourseId AS StudentCourse_CourseRefId, 
            True AS _from0
        FROM SchoolDBContext.Student_Courses AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchoolDBContext.Courses.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Courses
        [EF6ConsoleM2M02.Course](T1.Course_CourseId, T1.Course_CourseName)
    FROM (
        SELECT 
            T.CourseId AS Course_CourseId, 
            T.CourseName AS Course_CourseName, 
            True AS _from0
        FROM CodeFirstDatabase.Course AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchoolDBContext.Students.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Students
        [EF6ConsoleM2M02.Student](T1.Student_StudentId, T1.Student_StudentName)
    FROM (
        SELECT 
            T.StudentId AS Student_StudentId, 
            T.StudentName AS Student_StudentName, 
            True AS _from0
        FROM CodeFirstDatabase.Student AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchoolDBContext.Student_Courses.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Student_Courses
        [EF6ConsoleM2M02.Student_Courses](T3.[Student_Courses.Student_Courses_Source], T3.[Student_Courses.Student_Courses_Target])
    FROM (
        SELECT -- Constructing Student_Courses_Source
            CreateRef(SchoolDBContext.Students, row(T2.[Student_Courses.Student_Courses_Source.StudentId]), [EF6ConsoleM2M02.Student]) AS [Student_Courses.Student_Courses_Source], 
            T2.[Student_Courses.Student_Courses_Target]
        FROM (
            SELECT -- Constructing Student_Courses_Target
                T1.[Student_Courses.Student_Courses_Source.StudentId], 
                CreateRef(SchoolDBContext.Courses, row(T1.[Student_Courses.Student_Courses_Target.CourseId]), [EF6ConsoleM2M02.Course]) AS [Student_Courses.Student_Courses_Target]
            FROM (
                SELECT 
                    T.StudentRefId AS [Student_Courses.Student_Courses_Source.StudentId], 
                    T.CourseRefId AS [Student_Courses.Student_Courses_Target.CourseId], 
                    True AS _from0
                FROM CodeFirstDatabase.StudentCourse AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
    }
}
