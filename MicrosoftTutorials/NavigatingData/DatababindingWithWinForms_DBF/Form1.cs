using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.Entity;

//Database = E:\Visual Studio 2019\Databases\Products.mdf

namespace DatababindingWithWinForms_DBF
{
    public partial class Form1 : Form
    {
        ProductsEntities3 _context;
        public Form1()
        {
            InitializeComponent();
            //TestInit();
        }


        private void TestInit()
        {
            using (ProductsEntities3 ctx = new ProductsEntities3())
            {


                Product p = new Product
                {
                    Name = "P10",
                };

                Category c = new Category
                {
                    Name = "C10"
                };

                ctx.Products.Add(p);
                ctx.Categories.Add(c);

                c.Products.Add(p);

                ctx.SaveChanges();
            }

            MessageBox.Show("TestInit Completed");
        }

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            _context = new ProductsEntities3();

            // Call the Load method to get the data for the given DbSet
            // from the database.
            // The data is materialized as entities. The entities are managed by
            // the DbContext instance.
            _context.Categories.Load();

            // Bind the categoryBindingSource.DataSource to
            // all the Unchanged, Modified and Added Category objects that
            // are currently tracked by the DbContext.
            // Note that we need to call ToBindingList() on the
            // ObservableCollection<TEntity> returned by
            // the DbSet.Local property to get the BindingList<T>
            // in order to facilitate two-way binding in WinForms.
            this.categoryBindingSource.DataSource =
                _context.Categories.Local.ToBindingList();
        }

        private void categoryBindingNavigatorSaveItem_Click(object sender, EventArgs e)
        {
            this.Validate();

            // Currently, the Entity Framework doesn’t mark the entities
            // that are removed from a navigation property (in our example the Products)
            // as deleted in the context.
            // The following code uses LINQ to Objects against the Local collection
            // to fin;d all products and marks any that do not have
            // a Category reference as deleted.
            // The ToList call is required because otherwise
            // the collection will be modified
            // by the Remove call while it is being enumerated.
            // In most other situations you can do LINQ to Objects directly
            // against the Local property without using ToList first.
            foreach (var product in _context.Products.Local.ToList())
            {
                if (product.Category == null)
                {
                    _context.Products.Remove(product);
                }
            }

            // Save the changes to the database.
            this._context.SaveChanges();

            // Refresh the controls to show the values         
            // that were generated by the database.
            this.categoryDataGridView.Refresh();
            this.productsDataGridView.Refresh();
        }

        protected override void OnClosing(CancelEventArgs e)
        {
            base.OnClosing(e);
            this._context.Dispose();
        }

        private void btnDisplay_Click(object sender, EventArgs e)
        {
            foreach (var c in _context.Categories)
            {
                Console.WriteLine("CategoryId: {0} Category Name: {1}", c.CategoryId, c.Name);
                foreach (var p in c.Products)
                {
                    Console.WriteLine("\tProductId: {0} Product Name: {1}", p.ProductId, p.Name);
                }
                Console.WriteLine();
            }


            Console.WriteLine();

            foreach (var p in _context.Products)
            {
                Console.WriteLine("ProductId: {0} Product Name: {1}", p.ProductId, p.Name);
            }
        }
    }
}
