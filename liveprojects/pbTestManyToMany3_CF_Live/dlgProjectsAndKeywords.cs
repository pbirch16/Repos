using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Entity;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace pbTestManyToMany3_CF_Live
{
    public partial class dlgProjectsAndKeywords : Form
    {
        ProjectContext _context;
        public dlgProjectsAndKeywords()
        {
            InitializeComponent();
        }


        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            _context = new ProjectContext();

            // Call the Load method to get the data for the given DbSet
            // from the database.
            // The data is materialized as entities. The entities are managed by
            // the DbContext instance.
            _context.Projects.Load();

            // Bind the categoryBindingSource.DataSource to
            // all the Unchanged, Modified and Added Category objects that
            // are currently tracked by the DbContext.
            // Note that we need to call ToBindingList() on the
            // ObservableCollection<TEntity> returned by
            // the DbSet.Local property to get the BindingList<T>
            // in order to facilitate two-way binding in WinForms.
            this.projectBindingSource.DataSource =
                _context.Projects.Local.ToBindingList();
        }
        private void projectBindingNavigatorSaveItem_Click(object sender, EventArgs e)
        {
            this.Validate();

            // Currently, the Entity Framework doesn’t mark the entities
            // that are removed from a navigation property (in our example the Products)
            // as deleted in the context.
            // The following code uses LINQ to Objects against the Local collection
            // to find all projects and marks any that do not have
            // a Keyword reference as deleted.
            // The ToList call is required because otherwise
            // the collection will be modified
            // by the Remove call while it is being enumerated.
            // In most other situations you can do LINQ to Objects directly
            // against the Local property without using ToList first.
            foreach (var project in _context.Projects.Local.ToList())
            {
                if (project.Keywords == null)
                {
                    _context.Projects.Remove(project);
                    _context.SaveChanges();
                }

                
            }

            foreach (var project in _context.Projects.Local.ToList())
            {
                if (project.Xrefs == null)
                {
                    _context.Projects.Remove(project);
                    _context.SaveChanges();
                }
            }



            // Save the changes to the database.
            //this._context.SaveChanges();

            // Refresh the controls to show the values         
            // that were generated by the database.

            this.projectDataGridView.Refresh();
            this.keywordsDataGridView.Refresh();
            this.xrefsDataGridView.Refresh();
        }

        protected override void OnClosing(CancelEventArgs e)
        {
            base.OnClosing(e);
            this._context.Dispose();
        }
    }
}
