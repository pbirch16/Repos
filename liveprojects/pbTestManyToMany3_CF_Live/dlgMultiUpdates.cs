using System;
using System.ComponentModel;
using System.Data.Entity;
using System.Linq;
using System.Windows.Forms;

//https://docs.microsoft.com/en-us/ef/ef6/fundamentals/databinding/winforms#add-the-code-that-handles-data-interaction

namespace pbTestManyToMany3_CF_Live
{
    public partial class dlgMultiUpdates : Form
    {
        ProjectContext _ctx;
        public dlgMultiUpdates()
        {
            InitializeComponent();
            //Init();
        }
        private void dlgMultiUpdates_Load(object sender, EventArgs e)
        {
            _ctx = new ProjectContext();

            // Call the Load method to get the data for the given DbSet from the database.
            // The data is materialized as entities. The entities are managed by the DbContext instance.
            _ctx.Solutions.Load();

            // Bind the categoryBindingSource.DataSource to all the Unchanged, Modified and Added Category objects that
            // are currently tracked by the DbContext.
            // Note that we need to call ToBindingList() on the ObservableCollection<TEntity> returned by the 
            // DbSet.Local property to get the BindingList<T> in order to facilitate two-way binding in WinForms.
            this.solutionBindingSource.DataSource = _ctx.Solutions.Local.ToBindingList();
        }
        #region DlgMultiUpdates

        #endregion
        #region SOLUTIONS
        //private void SetupSolutionsDGV()
        //{
        //    //No need to select more than one row in this DGV    
        //    dgvSolutions.MultiSelect = false;
        //    dgvSolutions.AutoGenerateColumns = true;

        //    _ctx.Solutions.Load();

        //    bsSolutions.DataSource = _ctx.Solutions.Local.ToBindingList();
        //}

        //Save Solutions and Linked Projects
        private void tsbSPSave_Click(object sender, EventArgs e)
        {
            this.Validate();

            // Currently, the Entity Framework doesn’t mark the entities that are removed from a navigation property
            //  (in our example the Solutions) as deleted in the context.
            // The following code uses LINQ to Objects against the Local collection to find all products and marks any
            // that do not have a Solution reference as deleted.
            // The ToList call is required because otherwise the collection will be modifie by the Remove call
            // while it is being enumerated.
            // In most other situations you can do LINQ to Objects directly
            // against the Local property without using ToList first.
            foreach (Project p in _ctx.Projects.Local.ToList())
            {
                if (p.Solution == null)
                {
                    _ctx.Projects.Remove(p);
                }

                // Save the changes to the database.
                this._ctx.SaveChanges();

                // Refresh the controls to show the values that were generated by the database.
                this.solutionDataGridView.Refresh();
                this.projectsDataGridView.Refresh();
            }
        }


        #endregion

        #region PROJECTS

        //DatababindingWithWinForms_CF
        //private void SetupProjectsDGV()
        //{
        //    //No need to select more than one row in this DGV    
        //    dgvSolutionsProjects.MultiSelect = false;
        //    dgvSolutionsProjects.AutoGenerateColumns = true;

        //    //Display linked projects
        //    Solution s = (Solution)bsSolutions.Current;
        //    bsSolutionsProjects.DataSource = s.Projects.ToBindingList();
        //}
        private void btnLinkProjects_Click(object sender, EventArgs e)
        {

        }

        private void btnUnlinkProjects_Click(object sender, EventArgs e)
        {

        }

        private void btnSubmitProjects_Click(object sender, EventArgs e)
        {

        }
        #endregion PROJECTS

        #region KEYWORDS
        private void tsbSaveKeywords_Click(object sender, EventArgs e)
        {

        }

        private void btnLinkKeywords_Click(object sender, EventArgs e)
        {

        }

        private void btnUnlinkKeywords_Click(object sender, EventArgs e)
        {

        }

        private void btnSubmitKeywords_Click(object sender, EventArgs e)
        {

        }

        #endregion

        #region XREFS
        private void tsbSaveXrefs_Click(object sender, EventArgs e)
        {

        }

        private void btnLinkXrefs_Click(object sender, EventArgs e)
        {

        }

        private void btnUnlinkXrefs_Click(object sender, EventArgs e)
        {

        }

        private void btnSubmitXrefs_Click(object sender, EventArgs e)
        {

        }



        #endregion XREFS

        #region MISCELLANEOUS

        protected override void OnClosing(CancelEventArgs e)
        {
            base.OnClosing(e);
            this._ctx.Dispose();
        }
        #endregion


    }
}
